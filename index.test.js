const { test, expect } = require('@jest/globals')

const { V, M } = require('./matrix')
const {
  copy, scal, axpy, dot, norm2, dotFlame, axpyFlame, vecToZero,
  setToZero, setToIdentity, setToDiagonal, setToUpperTriangular,
  transpose, symmetrizeFromLower, scale,
  matrixVectorMult
} = require('./index.js')

const empty = []
const a = [1, 2, 3, 4, 5]
const b = [1, 1, 1, 1, 1]
const big1 = [300, 800, 1300, 1800, 2300, 2800, 3300, 3800, 4300, 4800, 5300, 5800, 6300, 6800, 7300, 7800, 8300, 8800, 9300, 9800, 10300, 10800, 11300, 11800, 12300, 12800, 13300, 13800, 14300, 14800, 15300, 15800, 16300, 16800, 17300, 17800, 18300, 18800, 19300, 19800, 20300, 20800, 21300, 21800, 22300, 22800, 23300, 23800, 24300, 24800, 25300, 25800, 26300, 26800, 27300, 27800, 28300, 28800, 29300, 29800, 30300, 30800, 31300, 31800, 32300, 32800, 33300, 33800, 34300, 34800, 35300, 35800, 36300, 36800, 37300, 37800, 38300, 38800, 39300, 39800, 40300, 40800, 41300, 41800, 42300, 42800, 43300, 43800, 44300, 44800, 45300, 45800, 46300, 46800, 47300, 47800, 48300, 48800, 49300, 49800, 50300, 50800, 51300, 51800, 52300, 52800, 53300, 53800, 54300, 54800, 55300, 55800, 56300, 56800, 57300, 57800, 58300, 58800, 59300, 59800, 60300, 60800, 61300, 61800, 62300, 62800, 63300, 63800, 64300, 64800, 65300, 65800, 66300, 66800, 67300, 67800, 68300, 68800, 69300, 69800, 70300, 70800, 71300, 71800, 72300, 72800, 73300, 73800, 74300, 74800, 75300, 75800, 76300, 76800, 77300, 77800, 78300, 78800, 79300, 79800, 80300, 80800, 81300, 81800, 82300, 82800, 83300, 83800, 84300, 84800, 85300, 85800, 86300, 86800, 87300, 87800, 88300, 88800, 89300, 89800, 90300, 90800, 91300, 91800, 92300, 92800, 93300, 93800, 94300, 94800, 95300, 95800, 96300, 96800, 97300, 97800, 98300, 98800, 99300, 99800, 100300, 100800, 101300, 101800, 102300, 102800, 103300, 103800, 104300, 104800, 105300, 105800, 106300, 106800, 107300, 107800, 108300, 108800, 109300, 109800, 110300, 110800, 111300, 111800, 112300, 112800, 113300, 113800, 114300, 114800, 115300, 115800, 116300, 116800, 117300, 117800, 118300, 118800, 119300, 119800, 120300, 120800, 121300, 121800, 122300, 122800, 123300, 123800, 124300, 124800, 125300, 125800, 126300, 126800, 127300, 127800, 128300, 128800, 129300, 129800, 130300, 130800, 131300, 131800, 132300, 132800, 133300, 133800, 134300, 134800, 135300, 135800, 136300, 136800, 137300, 137800, 138300, 138800, 139300, 139800, 140300, 140800, 141300, 141800, 142300, 142800, 143300, 143800, 144300, 144800, 145300, 145800, 146300, 146800, 147300, 147800, 148300, 148800, 149300, 149800, 150300, 150800, 151300, 151800, 152300, 152800, 153300, 153800, 154300, 154800, 155300, 155800, 156300, 156800, 157300, 157800, 158300, 158800, 159300, 159800, 160300, 160800, 161300, 161800, 162300, 162800, 163300, 163800, 164300, 164800, 165300, 165800, 166300, 166800, 167300, 167800, 168300, 168800, 169300, 169800, 170300, 170800, 171300, 171800, 172300, 172800, 173300, 173800, 174300, 174800, 175300, 175800, 176300, 176800, 177300, 177800, 178300, 178800, 179300, 179800, 180300, 180800, 181300, 181800, 182300, 182800, 183300, 183800, 184300, 184800, 185300, 185800, 186300, 186800, 187300, 187800, 188300, 188800, 189300, 189800, 190300, 190800, 191300, 191800, 192300, 192800, 193300, 193800, 194300, 194800, 195300, 195800, 196300, 196800, 197300, 197800, 198300, 198800, 199300, 199800, 200300, 200800, 201300, 201800, 202300, 202800, 203300, 203800, 204300, 204800, 205300, 205800, 206300, 206800, 207300, 207800, 208300, 208800, 209300, 209800, 210300, 210800, 211300, 211800, 212300, 212800, 213300, 213800, 214300, 214800, 215300, 215800, 216300, 216800, 217300, 217800, 218300, 218800, 219300, 219800, 220300, 220800, 221300, 221800, 222300, 222800, 223300, 223800, 224300, 224800, 225300, 225800, 226300, 226800, 227300, 227800, 228300, 228800, 229300, 229800, 230300, 230800, 231300, 231800, 232300, 232800, 233300, 233800, 234300, 234800, 235300, 235800, 236300, 236800, 237300, 237800, 238300, 238800, 239300, 239800, 240300, 240800, 241300, 241800, 242300, 242800, 243300, 243800, 244300, 244800, 245300, 245800, 246300, 246800, 247300, 247800, 248300, 248800, 249300, 249800, 250300, 250800, 251300, 251800, 252300, 252800, 253300, 253800, 254300, 254800, 255300, 255800, 256300, 256800, 257300, 257800, 258300, 258800, 259300, 259800, 260300, 260800, 261300, 261800, 262300, 262800, 263300, 263800, 264300, 264800, 265300, 265800, 266300, 266800, 267300, 267800, 268300, 268800, 269300, 269800, 270300, 270800, 271300, 271800, 272300, 272800, 273300, 273800, 274300, 274800, 275300, 275800, 276300, 276800, 277300, 277800, 278300, 278800, 279300, 279800, 280300, 280800, 281300, 281800, 282300, 282800, 283300, 283800, 284300, 284800, 285300, 285800, 286300, 286800, 287300, 287800, 288300, 288800, 289300, 289800, 290300, 290800, 291300, 291800, 292300, 292800, 293300, 293800, 294300, 294800, 295300, 295800, 296300, 296800, 297300, 297800, 298300, 298800, 299300, 299800]
const big2 = [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497]

// test('copy', () => {
//   expect(copy(empty)).toEqual(empty)
//   expect(copy(a)).toEqual(a)
// })

test('scal', () => {
  expect(scal(3, empty)).toEqual([])
  expect(scal(3, a)).toEqual([3, 6, 9, 12, 15])
})

test('axpy', () => {
  expect(() => axpy(3, empty, a)).toThrow()
  expect(axpy(3, a, b)).toEqual([4, 7, 10, 13, 16])
  expect(axpy(2, big1, big2)).toEqual([900, 1901, 2902, 3903, 4904, 5905, 6906, 7907, 8908, 9909, 10910, 11911, 12912, 13913, 14914, 15915, 16916, 17917, 18918, 19919, 20920, 21921, 22922, 23923, 24924, 25925, 26926, 27927, 28928, 29929, 30930, 31931, 32932, 33933, 34934, 35935, 36936, 37937, 38938, 39939, 40940, 41941, 42942, 43943, 44944, 45945, 46946, 47947, 48948, 49949, 50950, 51951, 52952, 53953, 54954, 55955, 56956, 57957, 58958, 59959, 60960, 61961, 62962, 63963, 64964, 65965, 66966, 67967, 68968, 69969, 70970, 71971, 72972, 73973, 74974, 75975, 76976, 77977, 78978, 79979, 80980, 81981, 82982, 83983, 84984, 85985, 86986, 87987, 88988, 89989, 90990, 91991, 92992, 93993, 94994, 95995, 96996, 97997, 98998, 99999, 101000, 102001, 103002, 104003, 105004, 106005, 107006, 108007, 109008, 110009, 111010, 112011, 113012, 114013, 115014, 116015, 117016, 118017, 119018, 120019, 121020, 122021, 123022, 124023, 125024, 126025, 127026, 128027, 129028, 130029, 131030, 132031, 133032, 134033, 135034, 136035, 137036, 138037, 139038, 140039, 141040, 142041, 143042, 144043, 145044, 146045, 147046, 148047, 149048, 150049, 151050, 152051, 153052, 154053, 155054, 156055, 157056, 158057, 159058, 160059, 161060, 162061, 163062, 164063, 165064, 166065, 167066, 168067, 169068, 170069, 171070, 172071, 173072, 174073, 175074, 176075, 177076, 178077, 179078, 180079, 181080, 182081, 183082, 184083, 185084, 186085, 187086, 188087, 189088, 190089, 191090, 192091, 193092, 194093, 195094, 196095, 197096, 198097, 199098, 200099, 201100, 201900, 202901, 203902, 204903, 205904, 206905, 207906, 208907, 209908, 210909, 211910, 212911, 213912, 214913, 215914, 216915, 217916, 218917, 219918, 220919, 221920, 222921, 223922, 224923, 225924, 226925, 227926, 228927, 229928, 230929, 231930, 232931, 233932, 234933, 235934, 236935, 237936, 238937, 239938, 240939, 241940, 242941, 243942, 244943, 245944, 246945, 247946, 248947, 249948, 250949, 251950, 252951, 253952, 254953, 255954, 256955, 257956, 258957, 259958, 260959, 261960, 262961, 263962, 264963, 265964, 266965, 267966, 268967, 269968, 270969, 271970, 272971, 273972, 274973, 275974, 276975, 277976, 278977, 279978, 280979, 281980, 282981, 283982, 284983, 285984, 286985, 287986, 288987, 289988, 290989, 291990, 292991, 293992, 294993, 295994, 296995, 297996, 298997, 299998, 300999, 302000, 303001, 304002, 305003, 306004, 307005, 308006, 309007, 310008, 311009, 312010, 313011, 314012, 315013, 316014, 317015, 318016, 319017, 320018, 321019, 322020, 323021, 324022, 325023, 326024, 327025, 328026, 329027, 330028, 331029, 332030, 333031, 334032, 335033, 336034, 337035, 338036, 339037, 340038, 341039, 342040, 343041, 344042, 345043, 346044, 347045, 348046, 349047, 350048, 351049, 352050, 353051, 354052, 355053, 356054, 357055, 358056, 359057, 360058, 361059, 362060, 363061, 364062, 365063, 366064, 367065, 368066, 369067, 370068, 371069, 372070, 373071, 374072, 375073, 376074, 377075, 378076, 379077, 380078, 381079, 382080, 383081, 384082, 385083, 386084, 387085, 388086, 389087, 390088, 391089, 392090, 393091, 394092, 395093, 396094, 397095, 398096, 399097, 400098, 401099, 402100, 402900, 403901, 404902, 405903, 406904, 407905, 408906, 409907, 410908, 411909, 412910, 413911, 414912, 415913, 416914, 417915, 418916, 419917, 420918, 421919, 422920, 423921, 424922, 425923, 426924, 427925, 428926, 429927, 430928, 431929, 432930, 433931, 434932, 435933, 436934, 437935, 438936, 439937, 440938, 441939, 442940, 443941, 444942, 445943, 446944, 447945, 448946, 449947, 450948, 451949, 452950, 453951, 454952, 455953, 456954, 457955, 458956, 459957, 460958, 461959, 462960, 463961, 464962, 465963, 466964, 467965, 468966, 469967, 470968, 471969, 472970, 473971, 474972, 475973, 476974, 477975, 478976, 479977, 480978, 481979, 482980, 483981, 484982, 485983, 486984, 487985, 488986, 489987, 490988, 491989, 492990, 493991, 494992, 495993, 496994, 497995, 498996, 499997, 500998, 501999, 503000, 504001, 505002, 506003, 507004, 508005, 509006, 510007, 511008, 512009, 513010, 514011, 515012, 516013, 517014, 518015, 519016, 520017, 521018, 522019, 523020, 524021, 525022, 526023, 527024, 528025, 529026, 530027, 531028, 532029, 533030, 534031, 535032, 536033, 537034, 538035, 539036, 540037, 541038, 542039, 543040, 544041, 545042, 546043, 547044, 548045, 549046, 550047, 551048, 552049, 553050, 554051, 555052, 556053, 557054, 558055, 559056, 560057, 561058, 562059, 563060, 564061, 565062, 566063, 567064, 568065, 569066, 570067, 571068, 572069, 573070, 574071, 575072, 576073, 577074, 578075, 579076, 580077, 581078, 582079, 583080, 584081, 585082, 586083, 587084, 588085, 589086, 590087, 591088, 592089, 593090, 594091, 595092, 596093, 597094, 598095, 599096, 600097])
})

test('dot', () => {
  expect(() => dot(empty, a)).toThrow()
  expect(dot(empty, empty)).toBe(0)
  expect(dot(a, b)).toBe(15)
  expect(dot(big1, big2)).toBe(36937711400)
})

test('norm2', () => {
  expect(norm2(empty)).toBe(0)
  expect(norm2(a)).toBeCloseTo(7.416198487, 9)
  expect(norm2(b)).toBeCloseTo(2.236067977, 9)
  expect(norm2(big1)).toBeCloseTo(Math.sqrt(dot(big1, big1)), 9)
})

test('dotFlame', () => {
  expect(() => dotFlame(V([]), V([1, 2, 3, 4, 5]))).toThrow()
  expect(dotFlame(V([]), V([]))).toBe(0)
  expect(dotFlame(V(a), V(b))).toBe(15)
  expect(dotFlame(V(big1), V(big2))).toBe(36937711400)
})

test('axpyFlame', () => {
  expect(() => axpyFlame(3, V([]), V(a))).toThrow()
  expect(axpyFlame(3, V(a), V(b))).toEqual(axpy(3, a, b))
  expect(axpyFlame(2, V(big1), V(big2))).toEqual(axpy(2, big1, big2))
})

test('vecToZero', () => {
  expect(vecToZero(V([]))).toEqual(V([]))
  expect(vecToZero(V(a))).toEqual(V(a.fill(0)))
  // expect(vecToZero(V(big1, 200))).toEqual(V(big1.fill(0), 200))
})

test('setToZero', () => {
  expect(setToZero(M([]))).toEqual(M([]))
  expect(setToZero(M(a))).toEqual(M(a.fill(0)))
  expect(setToZero(M(big1, 200))).toEqual(M(big1.fill(0), 200))
})

test('setToIdentity', () => {
  expect(setToIdentity(M([]))).toEqual(M([]))
  expect(setToIdentity(M([0]))).toEqual(M([1]))
  expect(setToIdentity(M([1]))).toEqual(M([1]))
  expect(setToIdentity(M([1, 2, 3, 4], 2))).toEqual(M([1, 0, 0, 1], 2))
  expect(setToIdentity(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))).toEqual(M([1, 0, 0, 0, 1, 0, 0, 0, 1], 3))
})

test('setToDiagonal', () => {
  expect(() => setToDiagonal(M([1, 2, 3, 4], 2), V([5, 6, 7]))).toThrow('different rows count')
  expect(setToDiagonal(M([]), V([]))).toEqual(M([]))
  expect(setToDiagonal(M([]), V([1]))).toEqual(M([]))
  expect(setToDiagonal(M([0]), V([1]))).toEqual(M([1]))
  expect(setToDiagonal(M([1]), V([1]))).toEqual(M([1]))
  expect(setToDiagonal(M([1, 2, 3, 4], 2), V([5, 6]))).toEqual(M([5, 0, 0, 6], 2))
  expect(setToDiagonal(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), V([10, 11, 12]))).toEqual(M([10, 0, 0, 0, 11, 0, 0, 0, 12], 3))
})

test('setToUpperTriangular', () => {
  expect(setToUpperTriangular(M([]))).toEqual(M([]))
  expect(setToUpperTriangular(M([0]))).toEqual(M([0]))
  expect(setToUpperTriangular(M([1]))).toEqual(M([1]))
  expect(setToUpperTriangular(M([1, 2, 3, 4], 2))).toEqual(M([1, 0, 3, 4], 2))
  expect(setToUpperTriangular(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))).toEqual(M([1, 0, 0, 4, 5, 0, 7, 8, 9], 3))
})

test('transpose', () => {
  expect(transpose(M([]))).toEqual(M([]))
  expect(transpose(M([1]))).toEqual(M([1]))
  expect(transpose(M([1, 2]))).toEqual(M([1, 2], 1))
  expect(transpose(M([1, 2], 1))).toEqual(M([1, 2]))
  expect(transpose(M([1, 2, 3, 4], 2))).toEqual(M([1, 3, 2, 4], 2))
  expect(transpose(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))).toEqual(M([1, 4, 7, 2, 5, 8, 3, 6, 9], 3))
})

test('symmetrizeFromLower', () => {
  expect(symmetrizeFromLower(M([]))).toEqual(M([]))
  expect(symmetrizeFromLower(M([0]))).toEqual(M([0]))
  expect(symmetrizeFromLower(M([1]))).toEqual(M([1]))
  expect(symmetrizeFromLower(M([1, 2, 3, 4], 2))).toEqual(M([1, 2, 2, 4], 2))
  expect(symmetrizeFromLower(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))).toEqual(M([1, 2, 3, 2, 5, 6, 3, 6, 9], 3))
})

test('scale', () => {
  expect(scale(M([]), 0)).toEqual(M([]))
  expect(scale(M([0]), 1)).toEqual(M([0]))
  expect(scale(M([1]), 2)).toEqual(M([2]))
  expect(scale(M([1, 2, 3, 4], 2), 10)).toEqual(M([10, 20, 30, 40], 2))
  expect(scale(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2)).toEqual(M([2, 4, 6, 8, 10, 12, 14, 16, 18], 3))
})

test('matrixVectorMult', () => {
  expect(matrixVectorMult(M([]), V([]))).toEqual(M([]))
  expect(matrixVectorMult(M([1]), V([1]))).toEqual(M([1]))
  expect(matrixVectorMult(M([1, 2], 1), V([1, 2]))).toEqual(M([5]))
  expect(matrixVectorMult(M([1, 2, 3, 4], 2), V([1, 2]))).toEqual(M([7, 10]))
  expect(matrixVectorMult(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), V([1, 2, 3]))).toEqual(M([30, 36, 42]))
})
