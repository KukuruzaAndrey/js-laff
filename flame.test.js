const { test, expect } = require('@jest/globals')

const {
  part1x2M, part2x1M, part2x2,
  merge1x2, merge2x1, merge2x2,
  repart1x2to1x3M, repart2x1to3x1M, repart2x2to3x3M,
  cont1x3to1x2M, cont3x1to2x1M, cont3x3to2x2,
  part2x1V, repart2x1to3x1V, cont3x1to2x1V
}
  = require('./flame.js')
const { rightToLeft, bottomToTop } = require('./directions')
const { M, V } = require('./matrix')

test('part2x1 for vectors', () => {
  expect(() => part2x1V(V([]), 0, 'wrongDirection')).toThrow()
  expect(part2x1V(V([]), 0)).toEqual([V([]), V([])])
  expect(part2x1V(V([]), 1)).toEqual([V([]), V([])])
  expect(part2x1V(V([1]), 0)).toEqual([V([]), V([1])])
  expect(part2x1V(V([1]), 1)).toEqual([V([1]), V([])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 0)).toEqual([V([]), V([1, 2, 3, 4, 5])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 1)).toEqual([V([1]), V([2, 3, 4, 5])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 4)).toEqual([V([1, 2, 3, 4]), V([5])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 5)).toEqual([V([1, 2, 3, 4, 5]), V([])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 6)).toEqual([V([1, 2, 3, 4, 5]), V([])])
  expect(part2x1V(V([]), 0, rightToLeft)).toEqual([V([]), V([])])
  expect(part2x1V(V([]), 1, rightToLeft)).toEqual([V([]), V([])])
  expect(part2x1V(V([1]), 1, rightToLeft)).toEqual([V([]), V([1])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 0, rightToLeft)).toEqual([V([1, 2, 3, 4, 5]), V([])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 1, rightToLeft)).toEqual([V([1, 2, 3, 4]), V([5])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 3, rightToLeft)).toEqual([V([1, 2]), V([3, 4, 5])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 4, rightToLeft)).toEqual([V([1]), V([2, 3, 4, 5])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 5, rightToLeft)).toEqual([V([]), V([1, 2, 3, 4, 5])])
  expect(part2x1V(V([1, 2, 3, 4, 5]), 6, rightToLeft)).toEqual([V([]), V([1, 2, 3, 4, 5])])
})

test('part1x2 for matrices', () => {
  expect(() => part1x2M(M([]), 0, 'wrongDirection')).toThrow()

  expect(part1x2M(M([], 2), 0)).toEqual([M([], 2), M([], 2)])
  expect(part1x2M(M([], 2), 1)).toEqual([M([], 2), M([], 2)])
  expect(part1x2M(M([], 2), 0, rightToLeft)).toEqual([M([], 2), M([], 2)])
  expect(part1x2M(M([], 2), 1, rightToLeft)).toEqual([M([], 2), M([], 2)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 0)).toEqual([M([], 1), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 0, rightToLeft)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), M([], 1)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 1)).toEqual([M([1]), M([2, 3, 4, 5, 6, 7, 8, 9], 1)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 1, rightToLeft)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8], 1), M([9])])

  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 0)).toEqual([M([], 3), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1)).toEqual([M([1, 2, 3], 3), M([4, 5, 6, 7, 8, 9], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2)).toEqual([M([1, 2, 3, 4, 5, 6], 3), M([7, 8, 9], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 3)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 4)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 0, rightToLeft)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1, rightToLeft)).toEqual([M([1, 2, 3, 4, 5, 6], 3), M([7, 8, 9], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2, rightToLeft)).toEqual([M([1, 2, 3], 3), M([4, 5, 6, 7, 8, 9], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 3, rightToLeft)).toEqual([M([], 3), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 4, rightToLeft)).toEqual([M([], 3), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)])

  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0)).toEqual([M([], 9), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 1)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), M([], 9)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0, rightToLeft)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), M([], 9)])
  expect(part1x2M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 1, rightToLeft)).toEqual([M([], 9), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)])
})

test('part2x1 for matrices', () => {
  expect(() => part2x1M(M([]), 0, 'wrongDirection')).toThrow()

  expect(part2x1M(M([], 2), 0)).toEqual([M([], 2), M([], 2)])
  expect(part2x1M(M([], 2), 1)).toEqual([M([], 2), M([], 2)])
  expect(part2x1M(M([], 2), 0, bottomToTop)).toEqual([M([], 2), M([], 2)])
  expect(part2x1M(M([], 2), 1, bottomToTop)).toEqual([M([], 2), M([], 2)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 0)).toEqual([M([], 1), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 0, bottomToTop)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), M([], 1)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 1)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), M([], 1)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1), 1, bottomToTop)).toEqual([M([], 1), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)])

  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 0)).toEqual([M([], 3), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1)).toEqual([M([1, 4, 7], 1), M([2, 3, 5, 6, 8, 9], 2)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2)).toEqual([M([1, 2, 4, 5, 7, 8], 2), M([3, 6, 9], 1)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 3)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([], 3)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 4)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([], 3)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 0, bottomToTop)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([], 3)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1, bottomToTop)).toEqual([M([1, 2, 4, 5, 7, 8], 2), M([3, 6, 9], 1)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2, bottomToTop)).toEqual([M([1, 4, 7], 1), M([2, 3, 5, 6, 8, 9], 2)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 3, bottomToTop)).toEqual([M([], 3), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 4, bottomToTop)).toEqual([M([], 3), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)])

  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0)).toEqual([M([], 9), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 1)).toEqual([M([1]), M([2, 3, 4, 5, 6, 7, 8, 9], 8)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0, bottomToTop)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), M([], 9)])
  expect(part2x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 1, bottomToTop)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8], 8), M([9])])
})

test('merge1x2', () => {
  expect(() => merge1x2(M([1, 2]), M([3, 4, 5]))).toThrow('different rows count')
  expect(merge1x2(M([]), M([]))).toEqual(M([]))
  expect(merge1x2(M([1]), M([]))).toEqual(M([1]))
  expect(merge1x2(M([]), M([1]))).toEqual(M([1]))
  expect(merge1x2(M([1]), M([2]))).toEqual(M([1, 2], 1))
  expect(merge1x2(M([1, 2], 1), M([3, 4], 1))).toEqual(M([1, 2, 3, 4], 1))
  expect(merge1x2(M([1, 2, 3, 4], 2), M([5, 6]))).toEqual(M([1, 2, 3, 4, 5, 6], 2))
  expect(merge1x2(M([1, 2, 3, 4]), M([5, 6, 7, 8]))).toEqual(M([1, 2, 3, 4, 5, 6, 7, 8], 4))
})

test('merge2x1', () => {
  expect(() => merge2x1(M([1, 2], 1), M([3, 4, 5], 1))).toThrow('different cols count')
  expect(merge2x1(M([]), M([]))).toEqual(M([]))
  expect(merge2x1(M([1]), M([]))).toEqual(M([1]))
  expect(merge2x1(M([]), M([1]))).toEqual(M([1]))
  expect(merge2x1(M([1]), M([2]))).toEqual(M([1, 2], 2))
  expect(merge2x1(M([1, 2], 1), M([3, 4], 1))).toEqual(M([1, 3, 2, 4], 2))
  expect(merge2x1(M([1, 2, 3, 4], 2), M([5, 6], 1))).toEqual(M([1, 2, 5, 3, 4, 6], 3))
  expect(merge2x1(M([1, 2], 1), M([3, 4, 5, 6], 2))).toEqual(M([1, 3, 4, 2, 5, 6], 3))
  expect(merge2x1(M([1, 2, 3, 4]), M([5, 6, 7, 8]))).toEqual(M([1, 2, 3, 4, 5, 6, 7, 8]))
  expect(merge2x1(M([1, 2, 3, 4], 2), M([5, 6, 7, 8], 2))).toEqual(M([1, 2, 5, 6, 3, 4, 7, 8], 4))
  expect(merge2x1(M([1, 2, 3, 4], 1), M([5, 6, 7, 8], 1))).toEqual(M([1, 5, 2, 6, 3, 7, 4, 8], 2))
})

test('merge2x2', () => {
  expect(merge2x2(M([]), M([]), M([]), M([]))).toEqual(M([]))
  expect(merge2x2(M([1]), M([]), M([]), M([]))).toEqual(M([1]))
  expect(merge2x2(M([]), M([1]), M([]), M([]))).toEqual(M([1]))
  expect(merge2x2(M([]), M([]), M([1]), M([]))).toEqual(M([1]))
  expect(merge2x2(M([]), M([]), M([]), M([1]))).toEqual(M([1]))
  expect(merge2x2(M([1]), M([3]), M([2]), M([4]))).toEqual(M([1, 2, 3, 4], 2))
  expect(merge2x2(M([1]), M([4, 7], 1), M([2, 3]), M([5, 6, 8, 9], 2))).toEqual(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))
})

test('part2x2', () => {
  expect(() => part2x2(M([]), 0, 0, 'wrongDirection')).toThrow()
  expect(part2x2(M([]), 0, 0)).toEqual([M([]), M([]), M([]), M([])])
  expect(part2x2(M([]), 0, 1)).toEqual([M([]), M([]), M([]), M([])])
  expect(part2x2(M([]), 1, 1)).toEqual([M([]), M([]), M([]), M([])])
  expect(part2x2(M([]), 1, 1)).toEqual([M([]), M([]), M([]), M([])])
  expect(part2x2(M([]), 2, 2)).toEqual([M([]), M([]), M([]), M([])])
  expect(part2x2(M([1]), 0, 0)).toEqual([M([]), M([], 1), M([], 0, 1), M([1])])
  expect(part2x2(M([1]), 0, 1)).toEqual([M([], 0, 1), M([]), M([1]), M([], 1)])
  expect(part2x2(M([1]), 1, 0)).toEqual([M([], 1), M([1]), M([]), M([], 0, 1)])
  expect(part2x2(M([1]), 1, 1)).toEqual([M([1]), M([], 0, 1), M([], 1), M([])])
  expect(part2x2(M([1]), 2, 2)).toEqual([M([1]), M([], 0, 1), M([], 1), M([])])
  expect(part2x2(M([1, 2]), 0, 0)).toEqual([M([]), M([]), M([]), M([1, 2])])
  expect(part2x2(M([1, 2]), 0, 1)).toEqual([M([]), M([]), M([1, 2]), M([])])
  expect(part2x2(M([1, 2]), 1, 0)).toEqual([M([]), M([1]), M([]), M([2])])
  expect(part2x2(M([1, 2]), 1, 1)).toEqual([M([1]), M([]), M([2]), M([])])
  expect(part2x2(M([1, 2]), 2, 1)).toEqual([M([1, 2]), M([]), M([]), M([])])
  expect(part2x2(M([1, 2]), 2, 2)).toEqual([M([1, 2]), M([]), M([]), M([])])
  expect(part2x2(M([1, 2]), 3, 3)).toEqual([M([1, 2]), M([]), M([]), M([])])
  expect(part2x2(M([1, 2], 1), 0, 0)).toEqual([M([]), M([]), M([]), M([1, 2], 1)])
  expect(part2x2(M([1, 2], 1), 0, 1)).toEqual([M([]), M([]), M([1]), M([2])])
  expect(part2x2(M([1, 2], 1), 1, 0)).toEqual([M([]), M([1, 2], 1), M([]), M([])])
  expect(part2x2(M([1, 2], 1), 1, 1)).toEqual([M([1]), M([2]), M([]), M([])])
  expect(part2x2(M([1, 2], 1), 1, 2)).toEqual([M([1, 2], 1), M([]), M([]), M([])])
  expect(part2x2(M([1, 2], 1), 2, 2)).toEqual([M([1, 2], 1), M([]), M([]), M([])])
  expect(part2x2(M([1, 2], 1), 3, 3)).toEqual([M([1, 2], 1), M([]), M([]), M([])])
  expect(part2x2(M([1, 2, 3, 4], 2), 0, 0)).toEqual([M([]), M([]), M([]), M([1, 2, 3, 4], 2)])
  expect(part2x2(M([1, 2, 3, 4], 2), 0, 1)).toEqual([M([]), M([]), M([1, 2]), M([3, 4])])
  expect(part2x2(M([1, 2, 3, 4], 2), 1, 0)).toEqual([M([]), M([1, 3], 1), M([]), M([2, 4], 1)])
  expect(part2x2(M([1, 2, 3, 4], 2), 1, 1)).toEqual([M([1]), M([3]), M([2]), M([4])])
  expect(part2x2(M([1, 2, 3, 4], 2), 1, 2)).toEqual([M([1, 3], 1), M([]), M([2, 4], 1), M([])])
  expect(part2x2(M([1, 2, 3, 4], 2), 2, 1)).toEqual([M([1, 2]), M([3, 4]), M([]), M([])])
  expect(part2x2(M([1, 2, 3, 4], 2), 2, 2)).toEqual([M([1, 2, 3, 4], 2), M([]), M([]), M([])])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 0, 0)).toEqual([M([]), M([]), M([]), M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 0, 1)).toEqual([M([]), M([]), M([1, 2, 3]), M([4, 5, 6, 7, 8, 9], 3)])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1, 0)).toEqual([M([]), M([1, 4, 7], 1), M([]), M([2, 3, 5, 6, 8, 9], 2)])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1, 1)).toEqual([M([1]), M([4, 7], 1), M([2, 3]), M([5, 6, 8, 9], 2)])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 1, 2)).toEqual([M([1, 4], 1), M([7]), M([2, 3, 5, 6], 2), M([8, 9])])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2, 1)).toEqual([M([1, 2]), M([4, 5, 7, 8], 2), M([3]), M([6, 9], 1)])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2, 2)).toEqual([M([1, 2, 4, 5], 2), M([7, 8]), M([3, 6], 1), M([9])])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 2, 3)).toEqual([M([1, 2, 4, 5, 7, 8], 2), M([]), M([3, 6, 9], 1), M([])])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 3, 2)).toEqual([M([1, 2, 3, 4, 5, 6], 3), M([7, 8, 9]), M([]), M([])])
  expect(part2x2(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), 3, 3)).toEqual([M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([]), M([]), M([])])
})
test('repart2x1to3x1 for vectors', () => {
  expect(() => repart2x1to3x1V(V([]), V([]), 0, 'wrongDirection')).toThrow()
  expect(repart2x1to3x1V(V([]), V([]), 0)).toEqual([V([]), V([]), V([])])
  expect(repart2x1to3x1V(V([]), V([]), 0, rightToLeft)).toEqual([V([]), V([]), V([])])
  expect(repart2x1to3x1V(V([1]), V([]), 1)).toEqual([V([]), V([1]), V([])])
  expect(repart2x1to3x1V(V([1]), V([]), 1, rightToLeft)).toEqual([V([1]), V([]), V([])])
  expect(repart2x1to3x1V(V([1, 2]), V([]), 1)).toEqual([V([1]), V([2]), V([])])
  expect(repart2x1to3x1V(V([1, 2]), V([1]), 1)).toEqual([V([1]), V([2]), V([1])])
  expect(repart2x1to3x1V(V([1, 2]), V([1]), 1, rightToLeft)).toEqual([V([1, 2]), V([1]), V([])])
  expect(repart2x1to3x1V(V([1, 2]), V([3, 4]), 1)).toEqual([V([1]), V([2]), V([3, 4])])
  expect(repart2x1to3x1V(V([1, 2]), V([3, 4]), 1, rightToLeft)).toEqual([V([1, 2]), V([3]), V([4])])
  expect(repart2x1to3x1V(V([1, 2, 3, 4]), V([5, 6]), 3)).toEqual([V([1]), V([2, 3, 4]), V([5, 6])])
  expect(repart2x1to3x1V(V([1, 2, 3, 4]), V([5, 6]), 3, rightToLeft)).toEqual([V([1, 2, 3, 4]), V([5, 6]), V([])])
})

test('repart1x2to1x3 for matrices', () => {
  expect(() => repart1x2to1x3M(M([1, 2, 3], 3), M([4, 5], 2), 1)).toThrow()
  expect(() => repart1x2to1x3M(M([1, 2], 2), M([3, 4, 5], 3), 1)).toThrow()
  expect(repart1x2to1x3M(M([]), M([]), 0)).toEqual([M([]), M([]), M([])])
  expect(repart1x2to1x3M(M([], 2), M([], 2), 0)).toEqual([M([], 2), M([], 2), M([], 2)])
  expect(repart1x2to1x3M(M([], 2), M([], 2), 0, rightToLeft)).toEqual([M([], 2), M([], 2), M([], 2)])
  expect(repart1x2to1x3M(M([1, 2], 1), M([3, 4], 1), 1)).toEqual([M([1], 1), M([2], 1), M([3, 4], 1)])
  expect(repart1x2to1x3M(M([1, 2], 2), M([3, 4], 2), 1)).toEqual([M([], 2), M([1, 2], 2), M([3, 4], 2)])
  expect(repart1x2to1x3M(M([1, 2]), M([3, 4]), 1, rightToLeft)).toEqual([M([1, 2]), M([3, 4]), M([], 2)])
  expect(repart1x2to1x3M(M([1, 2, 3, 4], 2), M([5, 6], 2), 1)).toEqual([M([1, 2], 2), M([3, 4], 2), M([5, 6], 2)])
  expect(repart1x2to1x3M(M([1, 2, 3, 4], 2), M([5, 6], 2), 1, rightToLeft)).toEqual([M([1, 2, 3, 4], 2), M([5, 6], 2), M([], 2)])
  expect(repart1x2to1x3M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([10, 11, 12], 3), 1)).toEqual([M([1, 2, 3, 4, 5, 6], 3), M([7, 8, 9], 3), M([10, 11, 12], 3)])
  expect(repart1x2to1x3M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([10, 11, 12], 3), 2)).toEqual([M([1, 2, 3], 3), M([4, 5, 6, 7, 8, 9], 3), M([10, 11, 12], 3)])
})

test('repart2x1to3x1 for matrices', () => {
  expect(() => repart2x1to3x1M(M([1, 2, 3], 1), M([4, 5], 1), 1)).toThrow()
  expect(() => repart2x1to3x1M(M([1, 2], 1), M([3, 4, 5], 1), 1)).toThrow()
  expect(repart2x1to3x1M(M([]), M([]), 0)).toEqual([M([]), M([]), M([])])
  expect(repart2x1to3x1M(M([], 2), M([], 2), 0)).toEqual([M([], 2), M([], 2), M([], 2)])
  expect(repart2x1to3x1M(M([], 2), M([], 2), 0, bottomToTop)).toEqual([M([], 2), M([], 2), M([], 2)])
  expect(repart2x1to3x1M(M([1, 2]), M([3, 4]), 0)).toEqual([M([1, 2], 2), M([], 2), M([3, 4], 2)])
  expect(repart2x1to3x1M(M([1, 2]), M([3, 4]), 0, bottomToTop)).toEqual([M([1, 2], 2), M([], 2), M([3, 4], 2)])
  expect(repart2x1to3x1M(M([1, 2]), M([3, 4]), 1)).toEqual([M([1]), M([2]), M([3, 4], 2)])
  expect(repart2x1to3x1M(M([1, 2]), M([3, 4]), 1, bottomToTop)).toEqual([M([1, 2], 2), M([3]), M([4])])
  expect(repart2x1to3x1M(M([1, 2], 1), M([3, 4], 1), 1)).toEqual([M([]), M([1, 2], 1), M([3, 4], 1)])
  expect(repart2x1to3x1M(M([1, 2], 1), M([3, 4], 1), 1, bottomToTop)).toEqual([M([1, 2], 1), M([3, 4], 1), M([])])
  expect(repart2x1to3x1M(M([1, 2, 3, 4], 2), M([5, 6], 1), 1)).toEqual([M([1, 3], 1), M([2, 4], 1), M([5, 6], 1)])
  expect(repart2x1to3x1M(M([1, 2, 3, 4], 2), M([5, 6], 1), 1, bottomToTop)).toEqual([M([1, 2, 3, 4], 2), M([5, 6], 1), M([], 2)])
  expect(repart2x1to3x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([10, 11, 12], 1), 1)).toEqual([M([1, 2, 4, 5, 7, 8], 2), M([3, 6, 9], 1), M([10, 11, 12], 1)])
  expect(repart2x1to3x1M(M([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), M([10, 11, 12], 1), 2)).toEqual([M([1, 4, 7], 1), M([2, 3, 5, 6, 8, 9], 2), M([10, 11, 12], 1)])
})

/*
1  2  3  4
5  6  7  8
9  10 11 12
13 14 15 16
17 18 19 20
*/
test('repart2x2to3x3', () => {
  expect(() => repart2x2to3x3M(M([1, 2]), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 1)).toThrow('different rows count')
  expect(() => repart2x2to3x3M(M([1]), M([2, 3, 4, 2, 2, 2], 2), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 1)).toThrow('different rows count')
  expect(() => repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17, 100]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 1)).toThrow('different rows count')
  expect(() => repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 7, 11, 15, 8, 12, 16], 3), 1, 1)).toThrow('different rows count')
  expect(() => repart2x2to3x3M(M([1, 2], 1), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 1)).toThrow('different cols count')
  expect(() => repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17, 2, 2, 2, 2], 4), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 1)).toThrow('different cols count')
  expect(() => repart2x2to3x3M(M([1]), M([2, 3, 4, 5], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 1)).toThrow('different cols count')
  expect(() => repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19], 4), 1, 1)).toThrow('different cols count')
  expect(repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 1))
    .toEqual([M([1]), M([2]), M([3, 4], 1), M([5]), M([6]), M([7, 8], 1), M([9, 13, 17]), M([10, 14, 18]), M([11, 15, 19, 12, 16, 20], 3)])
  expect(repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 2, 1))
    .toEqual([M([1]), M([2]), M([3, 4], 1), M([5, 9]), M([6, 10]), M([7, 11, 8, 12], 2), M([13, 17]), M([14, 18]), M([15, 19, 16, 20], 2)])
  expect(repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 1, 2))
    .toEqual([M([1]), M([2, 3], 1), M([4]), M([5]), M([6, 7], 1), M([8]), M([9, 13, 17]), M([10, 14, 18, 11, 15, 19], 3), M([12, 16, 20])])
  expect(repart2x2to3x3M(M([1]), M([2, 3, 4], 1), M([5, 9, 13, 17]), M([6, 10, 14, 18, 7, 11, 15, 19, 8, 12, 16, 20], 4), 2, 2))
    .toEqual([M([1]), M([2, 3], 1), M([4]), M([5, 9]), M([6, 10, 7, 11], 2), M([8, 12]), M([13, 17]), M([14, 18, 15, 19], 2), M([16, 20])])
})

test('cont3x1to2x1 for vectors', () => {
  expect(() => cont3x1to2x1V(V([]), V([]), V([]), 'wrongSide')).toThrow()
  expect(cont3x1to2x1V(V([]), V([]), V([]))).toEqual([V([]), V([])])
  expect(cont3x1to2x1V(V([]), V([]), V([]), rightToLeft)).toEqual([V([]), V([])])
  expect(cont3x1to2x1V(V([1]), V([]), V([2]))).toEqual([V([1]), V([2])])
  expect(cont3x1to2x1V(V([1]), V([]), V([2]), rightToLeft)).toEqual([V([1]), V([2])])
  expect(cont3x1to2x1V(V([1, 2]), V([3]), V([4, 5]))).toEqual([V([1, 2, 3]), V([4, 5])])
  expect(cont3x1to2x1V(V([1, 2]), V([3]), V([4, 5]), rightToLeft)).toEqual([V([1, 2]), V([3, 4, 5])])
  expect(cont3x1to2x1V(V([1, 2]), V([3, 4]), V([5, 6]))).toEqual([V([1, 2, 3, 4]), V([5, 6])])
  expect(cont3x1to2x1V(V([1, 2]), V([3, 4]), V([5, 6]), rightToLeft)).toEqual([V([1, 2]), V([3, 4, 5, 6])])
})

test('cont1x3to1x2', () => {
  expect(() => cont1x3to1x2M(M([]), M([]), M([]), 'wrongSide')).toThrow()
  expect(() => cont1x3to1x2M(M([1]), M([3, 4]), M([5, 6]))).toThrow()
  expect(() => cont1x3to1x2M(M([1, 2]), M([3]), M([5, 6]))).toThrow()
  expect(() => cont1x3to1x2M(M([1, 2]), M([3, 4]), M([5]))).toThrow()
  expect(cont1x3to1x2M(M([]), M([]), M([]))).toEqual([M([]), M([])])
  expect(cont1x3to1x2M(M([]), M([]), M([]), rightToLeft)).toEqual([M([]), M([])])
  expect(cont1x3to1x2M(M([1]), M([], 1), M([2]))).toEqual([M([1]), M([2])])
  expect(cont1x3to1x2M(M([1]), M([], 1), M([2]), rightToLeft)).toEqual([M([1]), M([2])])
  expect(cont1x3to1x2M(M([1, 2], 1), M([3]), M([4, 5], 1))).toEqual([M([1, 2, 3], 1), M([4, 5], 1)])
  expect(cont1x3to1x2M(M([1, 2], 1), M([3]), M([4, 5], 1), rightToLeft)).toEqual([M([1, 2], 1), M([3, 4, 5], 1)])
  expect(cont1x3to1x2M(M([1, 2]), M([3, 4]), M([5, 6]))).toEqual([M([1, 2, 3, 4], 2), M([5, 6])])
  expect(cont1x3to1x2M(M([1, 2]), M([3, 4]), M([5, 6]), rightToLeft)).toEqual([M([1, 2]), M([3, 4, 5, 6], 2)])
})

test('cont3x1to2x1', () => {
  expect(() => cont3x1to2x1M(M([]), M([]), M([]), 'wrongSide')).toThrow()
  expect(() => cont3x1to2x1M(M([1, 2]), M([3, 4], 1), M([5, 6], 1))).toThrow()
  expect(() => cont3x1to2x1M(M([1, 2], 1), M([3, 4]), M([5, 6], 1))).toThrow()
  expect(() => cont3x1to2x1M(M([1, 2], 1), M([3, 4], 1), M([5, 6]))).toThrow()
  expect(cont3x1to2x1M(M([]), M([]), M([]))).toEqual([M([]), M([])])
  expect(cont3x1to2x1M(M([]), M([]), M([]), bottomToTop)).toEqual([M([]), M([])])
  expect(cont3x1to2x1M(M([1]), M([], 1), M([2]))).toEqual([M([1]), M([2])])
  expect(cont3x1to2x1M(M([1]), M([], 1), M([2]), bottomToTop)).toEqual([M([1]), M([2])])
  expect(cont3x1to2x1M(M([1, 2]), M([3]), M([4, 5]))).toEqual([M([1, 2, 3]), M([4, 5])])
  expect(cont3x1to2x1M(M([1, 2]), M([3]), M([4, 5]), bottomToTop)).toEqual([M([1, 2]), M([3, 4, 5])])
  expect(cont3x1to2x1M(M([1, 2]), M([3, 4]), M([5, 6]))).toEqual([M([1, 2, 3, 4]), M([5, 6])])
  expect(cont3x1to2x1M(M([1, 2]), M([3, 4]), M([5, 6]), bottomToTop)).toEqual([M([1, 2]), M([3, 4, 5, 6])])
  expect(cont3x1to2x1M(M([1, 2], 1), M([3, 4], 1), M([5, 6], 1))).toEqual([M([1, 3, 2, 4], 2), M([5, 6], 1)])
  expect(cont3x1to2x1M(M([1, 2], 1), M([3, 4], 1), M([5, 6], 1), bottomToTop)).toEqual([M([1, 2], 1), M([3, 5, 4, 6], 2)])
})

test('cont3x3to2x2', () => {
  // expect(() => cont3x3to2x2(M([]), M([]), M([]), 'wrongSide')).toThrow()
  expect(cont3x3to2x2(
    M([]), M([]), M([]),
    M([]), M([]), M([]),
    M([]), M([]), M([]))).toEqual([M([]), M([]), M([]), M([])])
  expect(cont3x3to2x2(
    M([1]), M([2]), M([3]),
    M([4]), M([5]), M([6]),
    M([7]), M([8]), M([9]))).toEqual([M([1, 4, 2, 5], 2), M([3, 6]), M([7, 8], 1), M([9])])
  expect(cont3x3to2x2(
    M([1, 2, 3, 4], 2), M([5, 6]), M([7, 8]),
    M([9, 10, 11, 12, 13, 14], 3), M([15, 16, 17]), M([18, 19, 20]),
    M([21, 22], 1), M([23]), M([24])))
    .toEqual([M([1, 2, 9, 10, 11, 3, 4, 12, 13, 14, 5, 6, 15, 16, 17], 5), M([7, 8, 18, 19, 20]),
      M([21, 22, 23], 1), M([24])])
})
